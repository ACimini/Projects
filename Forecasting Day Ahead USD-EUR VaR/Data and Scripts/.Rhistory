x = "Date",
y = "Value",
color = "Quantile"
) +
theme_minimal()
# Read and preprocess the data
data <- read.csv("Combined_Data.csv")  # Use your data file path
data <- data %>%
select(date, Close, RR, atm1W, atm1M) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
window_size <- 1500
total_days <- nrow(data)
start_day <- window_size
eGARCH_IV_SSK <- data[, 1:3]
eGARCH_IV_SSK$ES0.01 <- NA
eGARCH_IV_SSK$ES0.025 <- NA
eGARCH_IV_SSK$ES0.05 <- NA
eGARCH_IV_SSK$ES0.95 <- NA
eGARCH_IV_SSK$ES0.975 <- NA
eGARCH_IV_SSK$ES0.99 <- NA
for (i in start_day:(total_days - 1)) {
window_data <- data[(i - window_size):(i - 1), ]
# Combine the external regressors (atm1W and atm1M) into a matrix
external_regressors <- cbind(window_data$atm1W, window_data$atm1M)
# Specify the EGARCH model with the external regressors
egarch_spec <- ugarchspec(
variance.model = list(
model = "eGARCH",
garchOrder = c(1, 1),
external.regressors = external_regressors
),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "std"  # Skewed Student's t-distribution
)
fit <- tryCatch(
ugarchfit(spec = egarch_spec, data = window_data$RR, solver = "solnp"),
error = function(e) NULL
)
if (!is.null(fit)) {
forecast <- ugarchforecast(fit, n.ahead = 1)
sigma_t <- sigma(forecast)
df <- coef(fit)["shape"]
if (!is.na(df)) {
lower_quantiles <- c(0.01, 0.025, 0.05)
VaR_lower <- -sigma_t * qt(lower_quantiles, df = df)
ES_lower <- -sigma_t * (dt(qt(lower_quantiles, df = df), df = df) / lower_quantiles)
upper_quantiles <- c(0.95, 0.975, 0.99)
VaR_upper <- sigma_t * qt(1 - upper_quantiles, df = df)
ES_upper <- sigma_t * (dt(qt(1 - upper_quantiles, df = df), df = df) / (1 - upper_quantiles))
eGARCH_IV_SSK$ES0.01[i] <- ES_lower[1]
eGARCH_IV_SSK$ES0.025[i] <- ES_lower[2]
eGARCH_IV_SSK$ES0.05[i] <- ES_lower[3]
eGARCH_IV_SSK$ES0.95[i] <- ES_upper[1]
eGARCH_IV_SSK$ES0.975[i] <- ES_upper[2]
eGARCH_IV_SSK$ES0.99[i] <- ES_upper[3]
}
}
if (i %% 10 == 0) {
print(paste("Iteration", i))
}
}
# Create a long format data frame that includes RR and ES values
# Filter out rows with NA ES values for plotting
valid_data <- eGARCH_IV_SSK %>% filter(!is.na(ES0.01))
plot_data <- eGARCH_IV_SSK %>%
select(date, RR, ES0.01, ES0.025, ES0.05, ES0.95, ES0.975, ES0.99) %>%
pivot_longer(cols = -c(date, RR), names_to = "Quantile", values_to = "ES")
# Plot the daily returns and ES values
ggplot() +
geom_line(data = plot_data, aes(x = date, y = RR), color = "black") +
geom_line(data = plot_data, aes(x = date, y = ES, color = Quantile), size = 0.8) +
labs(
title = "Daily Returns (RR) with Expected Shortfall (ES) Over Time",
x = "Date",
y = "Value",
color = "Quantile"
) +
theme_minimal()
window_size <- 1500
total_days <- nrow(data)
start_day <- window_size
eGARCH_IV_SSK <- data[, 1:3]
eGARCH_IV_SSK$ES0.01 <- NA
eGARCH_IV_SSK$ES0.025 <- NA
eGARCH_IV_SSK$ES0.05 <- NA
eGARCH_IV_SSK$ES0.95 <- NA
eGARCH_IV_SSK$ES0.975 <- NA
eGARCH_IV_SSK$ES0.99 <- NA
for (i in start_day:(total_days - 1)) {
window_data <- data[(i - window_size):(i - 1), ]
# Combine the external regressors (atm1W and atm1M) into a matrix
external_regressors <- cbind(window_data$atm1W, window_data$atm1M)
# Specify the EGARCH model with the external regressors
egarch_spec <- ugarchspec(
variance.model = list(
model = "eGARCH",
garchOrder = c(1, 1),
external.regressors = external_regressors
),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "std"  # Skewed Student's t-distribution
)
fit <- tryCatch(
ugarchfit(spec = egarch_spec, data = window_data$RR, solver = "gosolnp"),
error = function(e) NULL
)
if (!is.null(fit)) {
forecast <- ugarchforecast(fit, n.ahead = 1)
sigma_t <- sigma(forecast)
df <- coef(fit)["shape"]
if (!is.na(df)) {
lower_quantiles <- c(0.01, 0.025, 0.05)
VaR_lower <- -sigma_t * qt(lower_quantiles, df = df)
ES_lower <- -sigma_t * (dt(qt(lower_quantiles, df = df), df = df) / lower_quantiles)
upper_quantiles <- c(0.95, 0.975, 0.99)
VaR_upper <- sigma_t * qt(1 - upper_quantiles, df = df)
ES_upper <- sigma_t * (dt(qt(1 - upper_quantiles, df = df), df = df) / (1 - upper_quantiles))
eGARCH_IV_SSK$ES0.01[i] <- ES_lower[1]
eGARCH_IV_SSK$ES0.025[i] <- ES_lower[2]
eGARCH_IV_SSK$ES0.05[i] <- ES_lower[3]
eGARCH_IV_SSK$ES0.95[i] <- ES_upper[1]
eGARCH_IV_SSK$ES0.975[i] <- ES_upper[2]
eGARCH_IV_SSK$ES0.99[i] <- ES_upper[3]
}
}
if (i %% 10 == 0) {
print(paste("Iteration", i))
}
}
# Create a long format data frame that includes RR and ES values
# Filter out rows with NA ES values for plotting
valid_data <- eGARCH_IV_SSK %>% filter(!is.na(ES0.01))
plot_data <- eGARCH_IV_SSK %>%
select(date, RR, ES0.01, ES0.025, ES0.05, ES0.95, ES0.975, ES0.99) %>%
pivot_longer(cols = -c(date, RR), names_to = "Quantile", values_to = "ES")
# Plot the daily returns and ES values
ggplot() +
geom_line(data = plot_data, aes(x = date, y = RR), color = "black") +
geom_line(data = plot_data, aes(x = date, y = ES, color = Quantile), size = 0.8) +
labs(
title = "Daily Returns (RR) with Expected Shortfall (ES) Over Time",
x = "Date",
y = "Value",
color = "Quantile"
) +
theme_minimal()
library(tidyverse)
library(rugarch)
data <- read.csv("Combined_Data.csv")  # Use your data file path
data <- data %>%
select(date, Close, RR, atm1W, atm1M) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
fit = ugarchfit(spec, data = data$RR[1:1500])
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "sst"  # You can use "std" for Student's t or "ged" for Generalized Error Distribution
)
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "std"  # You can use "std" for Student's t or "ged" for Generalized Error Distribution
)
fit = ugarchfit(spec, data = data$RR[1:1500])
roll <- ugarchroll(
spec, data = data$RR[1:1500], n.ahead = 1, forecast.length = 500,
refit.every = 25, refit.window = "moving",
VaR.alpha = c(0.01, 0.05), calculate.VaR = TRUE
)
VaR_report <- report(roll, type = "VaR", VaR.alpha = 0.01, conf.level = 0.95)
VaR_exceedances <- roll@forecast$VaR[["VaR"]][, "0.01"]  # Adjust based on your needs
ES <- mean(data$RR[1:1500][data$RR[1:1500] < -VaR_exceedances], na.rm = TRUE)
VaR_report <- report(roll, type = "VaR", VaR.alpha = 0.01, conf.level = 0.95)
VaR_exceedances <- roll@forecast$VaR[["VaR"]][, "0.01"]  # Adjust based on your needs
ES <- mean(data$RR[1:1500][data$RR[1:1500] < -VaR_exceedances], na.rm = TRUE)
print(ES)
VaR_values <- roll@forecast$VaR
View(VaR_values)
VaR_exceedances <- VaR_values[ , "0.01"]
head(VaR_values)
VaR_exceedances <- VaR_values[, "alpha(1%)"]
# Calculate ES as the mean of losses greater than the VaR threshold
ES <- mean(VaR_values$realized[VaR_values$realized < VaR_exceedances], na.rm = TRUE)
print(ES)
View(VaR_values)
library(ggplot2)
# Calculate ES at each time point using a rolling window approach
ES_series <- sapply(1:nrow(VaR_values), function(i) {
# Get the current VaR threshold
current_VaR <- VaR_values[i, "alpha(1%)"]
# Identify losses greater than the current VaR
losses <- VaR_values$realized[1:i][VaR_values$realized[1:i] < current_VaR]
# Calculate ES (average of exceedances)
if (length(losses) > 0) {
return(mean(losses, na.rm = TRUE))
} else {
return(NA)  # If no losses, return NA
}
})
# Add the ES series to the VaR_values data frame
VaR_values$ES <- ES_series
# Plot using ggplot2
ggplot(VaR_values, aes(x = date, y = ES)) +
geom_line(color = "blue") +
labs(title = "Expected Shortfall (ES) Over Time", x = "Date", y = "ES") +
theme_minimal()
View(VaR_values)
head(data)
qdist()
?qqdist
?qdist
# Read and preprocess the data
data <- read.csv("Combined_Data.csv")  # Use your data file path
data <- data %>%
select(date, Close, RR, atm1W, atm1M) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
window_size <- 1500
total_days <- nrow(data)
start_day <- window_size
eGARCH_IV_SSK <- data[, 1:3]
eGARCH_IV_SSK$ES0.01 <- NA
eGARCH_IV_SSK$ES0.025 <- NA
eGARCH_IV_SSK$ES0.05 <- NA
eGARCH_IV_SSK$ES0.95 <- NA
eGARCH_IV_SSK$ES0.975 <- NA
eGARCH_IV_SSK$ES0.99 <- NA
for (i in start_day:(total_days - 1)) {
window_data <- data[(i - window_size):(i - 1), ]
# Specify the EGARCH model with the external regressors
egarch_spec <- ugarchspec(
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "jsu"  # Skewed Student's t-distribution
)
fit <- ugarchfit(spec = egarch_spec, data = window_data$RR)
forecast <- ugarchforecast(fit, n.ahead = 1,external.forecast = list(mregfor = as.matrix(window_data$atm1W[1500])))
VaR_next_day <- qdist(
"jsu", p = 0.01, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"]
)
ES_next_day <- mean(window_data$RR[window_data$RR < VaR_next_day], na.rm = TRUE)
eGARCH_IV_SSK$ES0.01[i+1] = ES_next_day
if (i %% 10 == 0) {
print(paste("Iteration", i))
}
}
library(ggplot2)
# Create a long format data frame that includes RR and ES values
# Filter out rows with NA ES values for plotting
valid_data <- eGARCH_IV_SSK %>% filter(!is.na(ES0.01))
plot_data <- valid_data %>%
select(date, RR, ES0.01, ES0.025, ES0.05, ES0.95, ES0.975, ES0.99) %>%
pivot_longer(cols = -c(date, RR), names_to = "Quantile", values_to = "ES")
# Plot the daily returns and ES values
ggplot() +
geom_line(data = plot_data, aes(x = date, y = RR), color = "black") +
geom_line(data = plot_data, aes(x = date, y = ES, color = Quantile), size = 0.8) +
labs(
title = "Daily Returns (RR) with Expected Shortfall (ES) Over Time",
x = "Date",
y = "Value",
color = "Quantile"
) +
theme_minimal()
window_size <- 1500
total_days <- nrow(data)
start_day <- window_size
eGARCH_IV_SSK <- data[, 1:3]
eGARCH_IV_SSK$ES0.01 <- NA
eGARCH_IV_SSK$ES0.025 <- NA
eGARCH_IV_SSK$ES0.05 <- NA
eGARCH_IV_SSK$ES0.95 <- NA
eGARCH_IV_SSK$ES0.975 <- NA
eGARCH_IV_SSK$ES0.99 <- NA
for (i in start_day:(total_days - 1)) {
window_data <- data[(i - window_size):(i - 1), ]
# Specify the EGARCH model with the external regressors
egarch_spec <- ugarchspec(
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE,
external.regressors = as.matrix(window_data$atm1W)),
distribution.model = "jsu"  # Using Johnson's SU distribution
)
fit <- ugarchfit(spec = egarch_spec, data = window_data$RR)
forecast <- ugarchforecast(fit, n.ahead = 1,external.forecast = list(mregfor = as.matrix(window_data$atm1W[1500])))
VaR01 <- qdist(
"jsu", p = 0.01, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"]
)
ES_01 <- mean(window_data$RR[window_data$RR < VaR01], na.rm = TRUE)
VaR025 <- qdist(
"jsu", p = 0.025, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"]
)
ES_025 <- mean(window_data$RR[window_data$RR < VaR025], na.rm = TRUE)
VaR05 <- qdist(
"jsu", p = 0.05, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"]
)
ES_05 <- mean(window_data$RR[window_data$RR < VaR05], na.rm = TRUE)
VaR95 <- qdist(
"jsu", p = 0.95, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"]
)
ES_95 <- mean(window_data$RR[window_data$RR < VaR95], na.rm = TRUE)
VaR975 <- qdist(
"jsu", p = 0.975, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"]
)
ES_975 <- mean(window_data$RR[window_data$RR < VaR975], na.rm = TRUE)
VaR99 <- qdist(
"jsu", p = 0.99, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"]
)
ES_99 <- mean(window_data$RR[window_data$RR < VaR99], na.rm = TRUE)
eGARCH_IV_SSK$ES0.01[i+1] = ES_01
eGARCH_IV_SSK$ES0.025[i+1] = ES_025
eGARCH_IV_SSK$ES0.05[i+1] = ES_05
eGARCH_IV_SSK$ES0.95[i+1] = ES_95
eGARCH_IV_SSK$ES0.975[i+1] = ES_975
eGARCH_IV_SSK$ES0.99[i+1] = ES_99
if (i %% 10 == 0) {
print(paste("Iteration", i))
}
}
# Create a long format data frame that includes RR and ES values
# Filter out rows with NA ES values for plotting
valid_data <- eGARCH_IV_SSK %>% filter(!is.na(ES0.01))
plot_data <- valid_data %>%
select(date, RR, ES0.01, ES0.025, ES0.05, ES0.95, ES0.975, ES0.99) %>%
pivot_longer(cols = -c(date, RR), names_to = "Quantile", values_to = "ES")
# Plot the daily returns and ES values
ggplot() +
geom_line(data = plot_data, aes(x = date, y = RR), color = "black") +
geom_line(data = plot_data, aes(x = date, y = ES, color = Quantile), size = 0.8) +
labs(
title = "Daily Returns (RR) with Expected Shortfall (ES) Over Time",
x = "Date",
y = "Value",
color = "Quantile"
) +
theme_minimal()
View(plot_data)
window_size <- 1500
total_days <- nrow(data)
start_day <- window_size
eGARCH_IV_SSK <- data[, 1:3]
eGARCH_IV_SSK$ES0.01 <- NA
eGARCH_IV_SSK$ES0.025 <- NA
eGARCH_IV_SSK$ES0.05 <- NA
eGARCH_IV_SSK$ES0.95 <- NA
eGARCH_IV_SSK$ES0.975 <- NA
eGARCH_IV_SSK$ES0.99 <- NA
for (i in start_day:(total_days - 1)) {
window_data <- data[(i - window_size):(i - 1), ]
# Specify the EGARCH model with the external regressors
egarch_spec <- ugarchspec(
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE,
external.regressors = as.matrix(window_data$atm1W)),
distribution.model = "jsu"  # Using Johnson's SU distribution
)
fit <- ugarchfit(spec = egarch_spec, data = window_data$RR)
forecast <- ugarchforecast(fit, n.ahead = 1,
external.forecast = list(mregfor = as.matrix(data$atm1W[i])))
# Calculate VaR for the lower tail (0.01, 0.025, 0.05)
VaR01 <- qdist("jsu", p = 0.01, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_01 <- mean(window_data$RR[window_data$RR < VaR01], na.rm = TRUE)
VaR025 <- qdist("jsu", p = 0.025, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_025 <- mean(window_data$RR[window_data$RR < VaR025], na.rm = TRUE)
VaR05 <- qdist("jsu", p = 0.05, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_05 <- mean(window_data$RR[window_data$RR < VaR05], na.rm = TRUE)
# Calculate VaR for the upper tail (0.95, 0.975, 0.99)
VaR95 <- qdist("jsu", p = 0.95, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_95 <- mean(window_data$RR[window_data$RR > VaR95], na.rm = TRUE)  # Adjusted condition
VaR975 <- qdist("jsu", p = 0.975, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_975 <- mean(window_data$RR[window_data$RR > VaR975], na.rm = TRUE)  # Adjusted condition
VaR99 <- qdist("jsu", p = 0.99, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_99 <- mean(window_data$RR[window_data$RR > VaR99], na.rm = TRUE)  # Adjusted condition
# Store the ES predictions
eGARCH_IV_SSK$ES0.01[i + 1] <- ES_01
eGARCH_IV_SSK$ES0.025[i + 1] <- ES_025
eGARCH_IV_SSK$ES0.05[i + 1] <- ES_05
eGARCH_IV_SSK$ES0.95[i + 1] <- ES_95
eGARCH_IV_SSK$ES0.975[i + 1] <- ES_975
eGARCH_IV_SSK$ES0.99[i + 1] <- ES_99
if (i %% 10 == 0) {
print(paste("Iteration", i))
}
}
# Create a long format data frame that includes RR and ES values
# Filter out rows with NA ES values for plotting
valid_data <- eGARCH_IV_SSK %>% filter(!is.na(ES0.01))
plot_data <- valid_data %>%
select(date, RR, ES0.01, ES0.025, ES0.05, ES0.95, ES0.975, ES0.99) %>%
pivot_longer(cols = -c(date, RR), names_to = "Quantile", values_to = "ES")
# Plot the daily returns and ES values
ggplot() +
geom_line(data = plot_data, aes(x = date, y = RR), color = "black") +
geom_line(data = plot_data, aes(x = date, y = ES, color = Quantile), size = 0.8) +
labs(
title = "Daily Returns (RR) with Expected Shortfall (ES) Over Time",
x = "Date",
y = "Value",
color = "Quantile"
) +
theme_minimal()
library(lmtest)
library(sandwich)
# Example for backtesting ES0.01
losses <- data$RR[start_day:total_days]  # Actual losses
predicted_ES <- eGARCH_IV_JSU$ES0.01[start_day:total_days]  # Predicted ES values
window_size <- 1500
total_days <- nrow(data)
start_day <- window_size
eGARCH_IV_JSU <- data[, 1:3]
eGARCH_IV_JSU$ES0.01 <- NA
eGARCH_IV_JSU$ES0.025 <- NA
eGARCH_IV_JSU$ES0.05 <- NA
eGARCH_IV_JSU$ES0.95 <- NA
eGARCH_IV_JSU$ES0.975 <- NA
eGARCH_IV_JSU$ES0.99 <- NA
for (i in start_day:(total_days - 1)) {
window_data <- data[(i - window_size):(i - 1), ]
# Specify the EGARCH model with the external regressors
egarch_spec <- ugarchspec(
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE,
external.regressors = as.matrix(window_data$atm1W)),
distribution.model = "jsu"  # Using Johnson's SU distribution
)
fit <- ugarchfit(spec = egarch_spec, data = window_data$RR)
forecast <- ugarchforecast(fit, n.ahead = 1,
external.forecast = list(mregfor = as.matrix(data$atm1W[i])))
# Calculate VaR for the lower tail (0.01, 0.025, 0.05)
VaR01 <- qdist("jsu", p = 0.01, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_01 <- mean(window_data$RR[window_data$RR < VaR01], na.rm = TRUE)
VaR025 <- qdist("jsu", p = 0.025, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_025 <- mean(window_data$RR[window_data$RR < VaR025], na.rm = TRUE)
VaR05 <- qdist("jsu", p = 0.05, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_05 <- mean(window_data$RR[window_data$RR < VaR05], na.rm = TRUE)
# Calculate VaR for the upper tail (0.95, 0.975, 0.99)
VaR95 <- qdist("jsu", p = 0.95, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_95 <- mean(window_data$RR[window_data$RR > VaR95], na.rm = TRUE)  # Adjusted condition
VaR975 <- qdist("jsu", p = 0.975, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_975 <- mean(window_data$RR[window_data$RR > VaR975], na.rm = TRUE)  # Adjusted condition
VaR99 <- qdist("jsu", p = 0.99, mu = fitted(forecast), sigma = sigma(forecast),
skew = coef(fit)["skew"], shape = coef(fit)["shape"])
ES_99 <- mean(window_data$RR[window_data$RR > VaR99], na.rm = TRUE)  # Adjusted condition
# Store the ES predictions
eGARCH_IV_JSU$ES0.01[i + 1] <- ES_01
eGARCH_IV_JSU$ES0.025[i + 1] <- ES_025
eGARCH_IV_JSU$ES0.05[i + 1] <- ES_05
eGARCH_IV_JSU$ES0.95[i + 1] <- ES_95
eGARCH_IV_JSU$ES0.975[i + 1] <- ES_975
eGARCH_IV_JSU$ES0.99[i + 1] <- ES_99
if (i %% 10 == 0) {
print(paste("Iteration", i))
}
}
# Create a long format data frame that includes RR and ES values
# Filter out rows with NA ES values for plotting
valid_data <- eGARCH_IV_JSU %>% filter(!is.na(ES0.01))
plot_data <- valid_data %>%
select(date, RR, ES0.01, ES0.025, ES0.05, ES0.95, ES0.975, ES0.99) %>%
pivot_longer(cols = -c(date, RR), names_to = "Quantile", values_to = "ES")
# Plot the daily returns and ES values
ggplot() +
geom_line(data = plot_data, aes(x = date, y = RR), color = "black") +
geom_line(data = plot_data, aes(x = date, y = ES, color = Quantile), size = 0.8) +
labs(
title = "Daily Returns (RR) with Expected Shortfall (ES) Over Time",
x = "Date",
y = "Value",
color = "Quantile"
) +
theme_minimal()
spec <- ugarchspec(
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "sstd"  # Change to "std" for Student's t or other distributions as needed
)
fit <- ugarchfit(spec = spec, data = data$RR[1:1550])
spec <- ugarchspec(
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "sstd"  # Change to "std" for Student's t or other distributions as needed
)
fit <- ugarchfit(spec = spec, data = data$RR[1:1550])
roll <- ugarchroll(
spec, data, n.ahead = 1, forecast.length = 1500, refit.every = 1,
refit.window = "moving", VaR.alpha = c(0.01, 0.05), calculate.VaR = TRUE
)
report(roll, type = "ES", VaR.alpha = 0.01, conf.level = 0.95)
roll <- ugarchroll(
spec, data$RR, n.ahead = 1, forecast.length = 50, refit.every = 1,
refit.window = "moving", VaR.alpha = c(0.01, 0.05), calculate.VaR = TRUE
)
report(roll, type = "ES", VaR.alpha = 0.01, conf.level = 0.95)
report(roll, type = "VaR", VaR.alpha = 0.01, conf.level = 0.95)
report(roll, type = "ES", VaR.alpha = 0.01, conf.level = 0.95)
