#define the workflow and fit the model
workflow_tree = workflow() |>
add_model(model_tree) |>
add_recipe(credit_recipe_short)
workflow_tree |> tune_grid(credits_cv, grid = 20)
model_tree = rand_forest(mode = "regression", trees = 100, mtry = tune(), min_n = tune()) |>
set_engine("ranger", importance = "impurity")
credit_recipe_short = recipe(Rating ~ ., data = credit_train) |>
#sets aside ID variable
update_role(ID, new_role = "id")
#define the workflow and fit the model
workflow_tree = workflow() |>
add_model(model_tree) |>
add_recipe(credit_recipe_short)
workflow_tree |> tune_grid(credits_cv, grid = 20)
fit_tree = workflow_tree |> fit(credit_train)
fit_tree |> show_best(metric = "rmse")
model_tree = rand_forest(mode = "regression", trees = 100, mtry = tune(), min_n = tune()) |>
set_engine("ranger", importance = "impurity")
credit_recipe_short = recipe(Rating ~ ., data = credit_train) |>
#sets aside ID variable
update_role(ID, new_role = "id")
model_tree = rand_forest(mode = "regression", trees = 100, mtry = tune(), min_n = tune()) |>
set_engine("ranger", importance = "impurity")
credit_recipe_short = recipe(Rating ~ ., data = credit_train) |>
#sets aside ID variable
update_role(ID, new_role = "id")
#define the workflow and fit the model
workflow_tree = workflow() |>
add_model(model_tree) |>
add_recipe(credit_recipe_short)
workflow_tree |> tune_grid(credits_cv, grid = 20)
workflow_tree |> show_best(metric = "rmse")
Forest = workflow_tree |> tune_grid(credits_cv, grid = 20)
Forest |> show_best(metric = "rmse")
model_tree = rand_forest(mode = "regression", trees = 500, mtry = tune(), min_n = tune()) |>
set_engine("ranger", importance = "impurity")
credit_recipe_short = recipe(Rating ~ ., data = credit_train) |>
#sets aside ID variable
update_role(ID, new_role = "id")
#define the workflow and fit the model
workflow_tree = workflow() |>
add_model(model_tree) |>
add_recipe(credit_recipe_short)
Forest = workflow_tree |> tune_grid(credits_cv, grid = 20)
Forest |> show_best(metric = "rmse")
model_tree = rand_forest(mode = "regression", trees = 500, mtry = tune(), min_n = tune()) |>
set_engine("ranger")
credit_recipe_short = recipe(Rating ~ ., data = credit_train) |>
#sets aside ID variable
update_role(ID, new_role = "id")
#define the workflow and fit the model
workflow_tree = workflow() |>
add_model(model_tree) |>
add_recipe(credit_recipe_short)
Forest = workflow_tree |> tune_grid(credits_cv, grid = 20)
Forest |> show_best(metric = "rmse")
model_tree = rand_forest(mode = "regression", trees = 500, mtry = tune(), min_n = tune()) |>
set_engine("ranger", importance = "variance")
credit_recipe_short = recipe(Rating ~ ., data = credit_train) |>
#sets aside ID variable
update_role(ID, new_role = "id")
#define the workflow and fit the model
workflow_tree = workflow() |>
add_model(model_tree) |>
add_recipe(credit_recipe_short)
Forest = workflow_tree |> tune_grid(credits_cv, grid = 20)
model_tree = rand_forest(mode = "regression", trees = 500, mtry = tune(), min_n = tune()) |>
set_engine("ranger", importance = "permutation")
credit_recipe_short = recipe(Rating ~ ., data = credit_train) |>
#sets aside ID variable
update_role(ID, new_role = "id")
#define the workflow and fit the model
workflow_tree = workflow() |>
add_model(model_tree) |>
add_recipe(credit_recipe_short)
Forest = workflow_tree |> tune_grid(credits_cv, grid = 20)
Forest |> show_best(metric = "rmse")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/PP_HP_IVOL_Data.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/State-Price-Yield-Data-Correlations.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/PP_HP_IVOL_Data.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Corn.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Soybeans.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-41-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-81-County-inverseCDF-datablocks.RData")
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = APH41,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
Premium_calc = function(Commodity_code, CFips, Producer_APH_Level, CVG_Level, PP_Price, IVOL, dT, Price_Yield_Corr, Seed_val, nsims){
set.seed(Seed_val)
if(Commodity_code == 41){
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-41-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Corn.RData")
}
if(Commodity_code == 81){
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-81-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Soybeans.RData")
}
type_test = ifelse(Commodity_code == 41, 16, 91)
# Filter county data
df0 <- subset(dfC, cfips == CFips & type == type_test & prac == 3)
cylds <- YLD_DETREND[, df0$cindex] # Historical detrended yields
df1 <- subset(df_etf, cfips == CFips)
etf <- ETF[, df1$index] # Farm-level residuals
# Simulate potential harvest prices (HP) using Geometric Brownian Motion
N <- nsims
dG <- (0 - 0.5 * IVOL^2) * dT + IVOL * rnorm(N) * sqrt(dT)
HP <- PP_Price * exp(dG)
# Simulate potential county and farm level yields, truncated at zero
tmp <- density(cylds)
cylds <- sample(tmp$x, N, prob = tmp$y, replace = TRUE)
chat <- mean(cylds) # Expected county yields
etf <- sample(etf, N, replace = TRUE)
dbar <- 0  # Assume farm's expected yield equals county expected yield
fylds <- dbar + cylds + etf
fylds[fylds < 0] <- 0 # Truncate yields at zero
# Correlate HP and fylds using the Iman-Conover method
MI <- cbind(HP, fylds)
R <- rho2cor(Price_Yield_Corr)
MC <- ImanConover(MI, R)
HP <- MC[, 1]
fylds <- MC[, 2]
# Calculate liability and indemnity
#APH <- round(Producer_APH_Level + chat, 0)
#the APH is equal to the county yields because we assume this, if it wasnt then we would use the APH function above
APH = chat
CVG <- CVG_Level
LIAB_PP <- CVG * PP_Price * APH
LIAB_HP <- CVG * HP * APH
LIAB <- pmax(LIAB_HP, LIAB_PP)
RTC <- HP * fylds
IPAY <- pmax(LIAB - RTC, 0)
PREM <- round(mean(IPAY), 2)
PRATE <- round(PREM / LIAB_PP, 4)
return(list(cfips = CFips,crop = Commodity_code,Premium = PREM,Premium_Rate =  PRATE, Liab = mean(LIAB)))
}
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = APH41,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
# find Story county
(pick=grep('Story',BOB$cname))
(df123=BOB[pick,])
(cfips0=df123$cfips[1])
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = APH41,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
# find Story county
(pick=grep('Story',BOB$cname))
BOB = read.csv("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/IOWA_BOB_Counties.csv")
# find Story county
(pick=grep('Story',BOB$cname))
(df123=BOB[pick,])
(cfips0=df123$cfips[1])
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = APH41,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
source("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/Misc_functions.R")
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = APH41,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
Test81 = Premium_calc(
Commodity_code = 81,
CFips = cfips0,
Producer_APH_Level = APH81,
CVG_Level = 0.85,
PP_Price = PP81_2024,
IVOL = IVOL81_2024,
dT = 8/12,
Price_Yield_Corr = rhoS,
Seed_val = 1001,
nsims = 10000
)
source("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/Misc_functions.R")
library(doBy)
BOB = read.csv("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/IOWA_BOB_Counties.csv")
Premium_calc = function(Commodity_code, CFips, Producer_APH_Level, CVG_Level, PP_Price, IVOL, dT, Price_Yield_Corr, Seed_val, nsims){
set.seed(Seed_val)
if(Commodity_code == 41){
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-41-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Corn.RData")
}
if(Commodity_code == 81){
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-81-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Soybeans.RData")
}
type_test = ifelse(Commodity_code == 41, 16, 91)
# Filter county data
df0 <- subset(dfC, cfips == CFips & type == type_test & prac == 3)
cylds <- YLD_DETREND[, df0$cindex] # Historical detrended yields
df1 <- subset(df_etf, cfips == CFips)
etf <- ETF[, df1$index] # Farm-level residuals
# Simulate potential harvest prices (HP) using Geometric Brownian Motion
N <- nsims
dG <- (0 - 0.5 * IVOL^2) * dT + IVOL * rnorm(N) * sqrt(dT)
HP <- PP_Price * exp(dG)
# Simulate potential county and farm level yields, truncated at zero
tmp <- density(cylds)
cylds <- sample(tmp$x, N, prob = tmp$y, replace = TRUE)
chat <- mean(cylds) # Expected county yields
etf <- sample(etf, N, replace = TRUE)
dbar <- 0  # Assume farm's expected yield equals county expected yield
fylds <- dbar + cylds + etf
fylds[fylds < 0] <- 0 # Truncate yields at zero
# Correlate HP and fylds using the Iman-Conover method
MI <- cbind(HP, fylds)
R <- rho2cor(Price_Yield_Corr)
MC <- ImanConover(MI, R)
HP <- MC[, 1]
fylds <- MC[, 2]
# Calculate liability and indemnity
#APH <- round(Producer_APH_Level + chat, 0)
#the APH is equal to the county yields because we assume this, if it wasnt then we would use the APH function above
APH = chat
CVG <- CVG_Level
LIAB_PP <- CVG * PP_Price * APH
LIAB_HP <- CVG * HP * APH
LIAB <- pmax(LIAB_HP, LIAB_PP)
RTC <- HP * fylds
IPAY <- pmax(LIAB - RTC, 0)
PREM <- round(mean(IPAY), 2)
PRATE <- round(PREM / LIAB_PP, 4)
return(list(cfips = CFips,crop = Commodity_code,Premium = PREM,Premium_Rate =  PRATE, Liab = mean(LIAB)))
}
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/State-Price-Yield-Data-Correlations.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/State-Price-Yield-Data-Correlations.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/PP_HP_IVOL_Data.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Corn.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Soybeans.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-41-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-81-County-inverseCDF-datablocks.RData")
# find Story county
(pick=grep('Story',BOB$cname))
(df123=BOB[pick,])
(cfips0=df123$cfips[1])
df41 <- subset(dfC, cfips == cfips0 & type == 16 & prac == 3)
cylds41 <- YLD_DETREND[, df41$cindex] # Historical detrended yields
APH41 = mean(cylds41)
df81 <- subset(dfC, cfips == cfips0 & type == 91 & prac == 3)
cylds81 <- YLD_DETREND[, df81$cindex] # Historical detrended yields
APH81 = mean(cylds81)
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = APH41,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
df41 <- subset(dfC, cfips == cfips0 & type == 16 & prac == 3)
cylds41 <- YLD_DETREND[, df41$cindex] # Historical detrended yields
APH41 = mean(cylds41)
df81 <- subset(dfC, cfips == cfips0 & type == 91 & prac == 3)
cylds81 <- YLD_DETREND[, df81$cindex] # Historical detrended yields
APH81 = mean(cylds81)
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = 0,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
Test81 = Premium_calc(
Commodity_code = 81,
CFips = cfips0,
Producer_APH_Level = APH81,
CVG_Level = 0.85,
PP_Price = PP81_2024,
IVOL = IVOL81_2024,
dT = 8/12,
Price_Yield_Corr = rhoS,
Seed_val = 1001,
nsims = 10000
)
Premium_calc = function(Commodity_code, CFips, Producer_APH_Level, CVG_Level, PP_Price, IVOL, dT, Price_Yield_Corr, Seed_val, nsims){
set.seed(Seed_val)
if(Commodity_code == 41){
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-41-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Corn.RData")
}
if(Commodity_code == 81){
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/CROP-81-County-inverseCDF-datablocks.RData")
load("C:/Users/alexc/OneDrive/Desktop/EFIN 401/Assignments/Problem Set 7/RMA-Yields-Soybeans.RData")
}
type_test = ifelse(Commodity_code == 41, 16, 91)
# Filter county data
df0 <- subset(dfC, cfips == CFips & type == type_test & prac == 3)
cylds <- YLD_DETREND[, df0$cindex] # Historical detrended yields
df1 <- subset(df_etf, cfips == CFips)
etf <- ETF[, df1$index] # Farm-level residuals
# Simulate potential harvest prices (HP) using Geometric Brownian Motion
N <- nsims
dG <- (0 - 0.5 * IVOL^2) * dT + IVOL * rnorm(N) * sqrt(dT)
HP <- PP_Price * exp(dG)
# Simulate potential county and farm level yields, truncated at zero
tmp <- density(cylds)
cylds <- sample(tmp$x, N, prob = tmp$y, replace = TRUE)
chat <- mean(cylds) # Expected county yields
etf <- sample(etf, N, replace = TRUE)
dbar <- 0  # Assume farm's expected yield equals county expected yield
fylds <- dbar + cylds + etf
fylds[fylds < 0] <- 0 # Truncate yields at zero
# Correlate HP and fylds using the Iman-Conover method
MI <- cbind(HP, fylds)
R <- rho2cor(Price_Yield_Corr)
MC <- ImanConover(MI, R)
HP <- MC[, 1]
fylds <- MC[, 2]
# Calculate liability and indemnity
#APH <- round(Producer_APH_Level + chat, 0)
#the APH is equal to the county yields because we assume this, if it wasnt then we would use the APH function above
APH = chat
CVG <- CVG_Level
LIAB_PP <- CVG * PP_Price * APH
LIAB_HP <- CVG * HP * APH
LIAB <- pmax(LIAB_HP, LIAB_PP)
RTC <- HP * fylds
IPAY <- pmax(LIAB - RTC, 0)
PREM <- round(mean(IPAY), 2)
PRATE <- round(PREM / LIAB_PP, 4)
return(list(cfips = CFips,crop = Commodity_code,Premium = PREM/100,Premium_Rate =  PRATE, Liab = mean(LIAB)/100))
}
# find Story county
(pick=grep('Story',BOB$cname))
(df123=BOB[pick,])
(cfips0=df123$cfips[1])
df41 <- subset(dfC, cfips == cfips0 & type == 16 & prac == 3)
cylds41 <- YLD_DETREND[, df41$cindex] # Historical detrended yields
APH41 = mean(cylds41)
df81 <- subset(dfC, cfips == cfips0 & type == 91 & prac == 3)
cylds81 <- YLD_DETREND[, df81$cindex] # Historical detrended yields
APH81 = mean(cylds81)
Test41 = Premium_calc(
Commodity_code = 41,
CFips = cfips0,
Producer_APH_Level = 0,
CVG_Level = 0.85,
PP_Price = PP41_2024,
IVOL = IVOL41_2024,
dT = 8/12,
Price_Yield_Corr = rhoC,
Seed_val = 1001,
nsims = 10000
)
Test81 = Premium_calc(
Commodity_code = 81,
CFips = cfips0,
Producer_APH_Level = APH81,
CVG_Level = 0.85,
PP_Price = PP81_2024,
IVOL = IVOL81_2024,
dT = 8/12,
Price_Yield_Corr = rhoS,
Seed_val = 1001,
nsims = 10000
)
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
library(plotly)
library(broom)
library(ggplot2)
knitr::opts_chunk$set(
echo = T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
dpi = 300,
warning = F,
message = F
)
plot.ts(diff(df$log_corn))
library(knitr)
library(tidyverse)
library(gapminder)
library(data.table)
library(plotly)
library(broom)
library(ggplot2)
knitr::opts_chunk$set(
echo = T,
fig.align = "center",
out.width = "80%",
fig.height = 4,
dpi = 300,
warning = F,
message = F
)
df <- read.csv("df_yield_cpi.csv")
head(df)
df$log_corn = log(df$y_corn)
ggplot(df, aes(x = year, y = log_corn)) + geom_line()
df$log_cpi = log(df$cpi)
ggplot(df, aes(x = year, y = log_cpi)) + geom_line()
model = lm(df$log_corn ~ df$log_cpi)
summary(model)
plot.ts(diff(df$log_corn))
plot.ts(diff(df$log_cpi))
model_lag = lm(diff(df$log_corn) ~ diff(df$log_cpi))
summary(model_lag)
model_diff = lm(diff(df$log_corn) ~ diff(df$log_cpi))
plot.ts(diff(df$log_corn))
plot.ts(diff(df$log_cpi))
summary(model_diff)
setwd("C:/Users/alexc/OneDrive/Desktop/ECNS 460/GitHub Materials/EIND-468-Computational-Project/Data")
data <- read.csv("COmbined_Data.csv")  # Use your data file path
data <- data %>%
select( - X) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
data$date = as.Date(data$date, format = "%Y-%m-%d")
library(esback)
library(esreg)
library(tidyverse)
library(ggplot2)
data <- data %>%
select( - X) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
data <- read.csv("eGARCH_IV_SSK.csv")  # Use your data file path
data <- data %>%
select( - X) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
data$date = as.Date(data$date, format = "%Y-%m-%d")
ggplot(data, aes(x = date))+ geom_line(aes(y = RR/100), col = 'black') + geom_line(aes(y = ES0.01), col = 'red')
ggplot(data, aes(x = date))+ geom_line(aes(y = RR), col = 'black') + geom_line(aes(y = ES0.01), col = 'red')
ggplot(data, aes(x = date))+ geom_line(aes(y = RR), col = 'black') +
geom_line(aes(y = ES0.01), col = 'red') +
geom_line(aes(y = ES0.99), col = 'blue')
ggplot(data, aes(x = date))+ geom_line(aes(y = RR), col = 'black') +
geom_line(aes(y = ES0.01), col = 'red') +
geom_line(aes(y = ES0.99), col = 'blue') +
xlab("Returns") +
ylab("Date")
ggplot(data, aes(x = date))+ geom_line(aes(y = RR), col = 'black') +
geom_line(aes(y = ES0.01), col = 'red') +
geom_line(aes(y = ES0.99), col = 'blue') +
xlab("Returns") +
ylab("Date") +
title("ES")
ggplot(data, aes(x = date))+ geom_line(aes(y = RR), col = 'black') +
geom_line(aes(y = ES0.01), col = 'red') +
geom_line(aes(y = ES0.99), col = 'blue') +
xlab("Returns") +
ylab("Date") +
ggtitle("ES")
ggplot(data, aes(x = date))+ geom_line(aes(y = RR), col = 'black') +
geom_line(aes(y = ES0.01), col = 'red') +
geom_line(aes(y = ES0.99), col = 'blue') +
xlab("Returns") +
ylab("Date") +
ggtitle("eGARCH IV SSK Expected Shortfall")
ES_IV = ggplot(data, aes(x = date))+ geom_line(aes(y = RR), col = 'black') +
geom_line(aes(y = ES0.01), col = 'red') +
geom_line(aes(y = ES0.99), col = 'blue') +
xlab("Returns") +
ylab("Date") +
ggtitle("eGARCH IV SSK Expected Shortfall")
ggsave("eGARCH_IV_SSK.png", plot = Returns, width = 15, height = 5, dpi = 300)
ggsave("eGARCH_IV_SSK.png", plot = ES_IV, width = 15, height = 5, dpi = 300)
