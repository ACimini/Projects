add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
#feeding the data into the JSON package to get out the data we need
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
#the URL for the data pull
url <- "https://data.alpaca.markets/v1beta1/options/bars"
#the query fot the request
queryString <- list(
symbols = "AAPL",
timeframe = "1Day",
start = "2022-01-01",
end = "2023-01-01",
limit = "1000",
adjustment = "raw",
feed = "iex",
sort = "asc"
)
#response list for what we are looking for
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
#feeding the data into the JSON package to get out the data we need
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
#looks at the data
head(df)
#the URL for the data pull
url <- "https://data.alpaca.markets/v1beta1/options/bars"
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03T00%3A00%3A00Z",
end = "2024-01-04T00%3A00%3A00Z",
limit = "1000",
sort = "asc"
)
response <- VERB("GET", url, query = queryString, content_type("application/octet-stream"), accept("application/json"))
content(response, "text")
#response list for what we are looking for
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
#feeding the data into the JSON package to get out the data we need
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
#the URL for the data pull
url <- "https://data.alpaca.markets/v1beta1/options/bars"
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03T00%3A00%3A00Z",
end = "2024-01-04T00%3A00%3A00Z",
limit = "1000",
sort = "asc"
)
response <- VERB("GET", url, query = queryString, content_type("application/octet-stream"), accept("application/json"))
content(response, "text")
url <- "https://data.alpaca.markets/v1beta1/options/bars"
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03T00%3A00%3A00Z",
end = "2024-01-04T00%3A00%3A00Z",
limit = "1000",
sort = "asc"
)
#response list for what we are looking for
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
#t = time stamp
#o = open
#h = high
#l = low
#c = close
#v = volume
#n = trade count
#s = symbol
#vw = Volume weighted price average
#feeding the data into the JSON package to get out the data we need
data = content(response, "text")
url <- "https://data.alpaca.markets/v1beta1/options/bars"
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03T00%3A00%3A00Z",
end = "2024-01-04T00%3A00%3A00Z",
limit = "1000",
sort = "asc"
)
response <- VERB("GET", url, query = queryString, add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")), content_type("application/octet-stream"), accept("application/json"))
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03T00%3A00%3A00Z",
end = "2024-01-04T00%3A00%3A00Z",
limit = "100",
sort = "asc"
)
response <- VERB("GET", url, query = queryString, add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")), content_type("application/octet-stream"), accept("application/json"))
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
library(httr)
url <- "https://data.alpaca.markets/v1beta1/options/bars"
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03T00%3A00%3A00Z",
end = "2024-01-04T00%3A00%3A00Z",
limit = "100",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
content(response, "text")
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03",
end = "2024-01-04",
limit = "100",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
content(response, "text")
queryString <- list(
symbols = "AAPL",
timeframe = "15min",
start = "2024-01-03",
end = "2024-01-04",
limit = "100",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
content(response, "text")
queryString <- list(
symbols = "AAPL241220C00300000%2CAAPL240315C00225000",
timeframe = "15min",
start = "2024-01-03",
end = "2024-01-04",
limit = "100",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"), 'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
content(response, "text")
queryString <- list(
symbols = "AAPL241220C00300000",
timeframe = "15min",
start = "2024-01-03",
end = "2024-01-04",
limit = "100",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"),
'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
content(response, "text")
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
url <- "https://data.alpaca.markets/v1beta1/options/bars"
queryString <- list(
symbols = "AAPL241220C00300000",
timeframe = "15min",
start = "2024-01-03",
end = "2024-01-04",
limit = "100",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"),
'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
queryString <- list(
symbols = "AAPL241220C00300000",
timeframe = "1D",
start = "2024-01-03",
end = "2024-01-04",
limit = "100",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"),
'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
queryString <- list(
symbols = "AAPL241220C00300000",
timeframe = "1D",
start = "2024-01-03",
end = "2024-01-04",
limit = "10",
sort = "asc"
)
response <- VERB("GET",
url,
query = queryString,
add_headers('APCA-API-KEY-ID' = Sys.getenv("key_id"),
'APCA-API-SECRET-KEY' = Sys.getenv("secret_id")),
content_type("application/octet-stream"), accept("application/json"))
data = content(response, "text")
dataJson = fromJSON(data,flatten = TRUE)
df = as.data.frame(dataJson$bars)
library(rvest)
library(httr)
library(jsonlite)
library(tidyverse)
library(ggplot2)
library(dplyr)
func = function(x){
x^5 + 4*X - 3
}
second = taylor(func, 6, 2)
second = taylor(func, 6, 2)
third = taylor(func, 6, 3)
install.packages("pracma")
library(pracma)
second = taylor(func, 6, 2)
third = taylor(func, 6, 3)
second = taylor(func(3), 6, 2)
func = function(X){
x^5 + 4*X - 3
}
second = taylor(func(3), 6, 2)
third = taylor(func, 6, 3)
# Define the function correctly
func = function(X) {
X^5 + 4*X - 3
}
# Compute the second-order Taylor series expansion around X = 6
second = taylor(func, 6, 2)
# Compute the third-order Taylor series expansion around X = 6
third = taylor(func, 6, 3)
# Print the results
print(second)
print(third)
# Compute the second-order Taylor series expansion around X = 6
second = taylor(func, 6, 1)
# Compute the second-order Taylor series expansion around X = 6
second = taylor(func, 6, 0)
# Compute the third-order Taylor series expansion around X = 6
third = taylor(func, 6, 5)
# Print the results
print(second)
print(third)
# Compute the second-order Taylor series expansion around X = 6
second = taylor(func, 6, 2)
# Compute the third-order Taylor series expansion around X = 6
third = taylor(func, 6, 3)
# Print the results
print(second)
print(third)
# Define the function correctly
func = function(X) {
X^2 + 3
}
# Compute the second-order Taylor series expansion around X = 6
second = taylor(func, 6, 2)
# Compute the third-order Taylor series expansion around X = 6
third = taylor(func, 6, 3)
(X^2-6) + 3
# Define the function correctly
func = function(X) {
(X^2-6) + 3
}
# Compute the second-order Taylor series expansion around X = 6
second = taylor(func, 6, 2)
# Compute the third-order Taylor series expansion around X = 6
third = taylor(func, 6, 3)
# Print the results
print(second)
print(third)
library(pracma)
# Define the function
func = function(X) {
(X^2 - 6) + 3
}
# Compute the Taylor series expansions
second = taylor(func, 6, 2)  # Second-order Taylor series
third = taylor(func, 6, 3)   # Third-order Taylor series
# Define a range of X values for plotting
X = seq(0, 12, length.out = 500)
# Evaluate the original function and Taylor series
original = func(X)
second_approx = polyval(second, X - 6)  # Evaluate the second-order series
third_approx = polyval(third, X - 6)   # Evaluate the third-order series
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the second-order Taylor series
lines(X, second_approx, col = "blue", lty = 2, lwd = 2)
# Add the third-order Taylor series
lines(X, third_approx, col = "red", lty = 3, lwd = 2)
# Add a legend
legend("topright", legend = c("Original Function", "2nd Order", "3rd Order"),
col = c("black", "blue", "red"), lty = c(1, 2, 3), lwd = 2)
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the third-order Taylor series
lines(X, third_approx, col = "red", lty = 3, lwd = 2)
# Compute the Taylor series expansions
second = taylor(func, 6, 12)  # Second-order Taylor series
third = taylor(func, 6, 3)   # Third-order Taylor series
# Define a range of X values for plotting
X = seq(0, 12, length.out = 500)
# Evaluate the original function and Taylor series
original = func(X)
second_approx = polyval(second, X - 6)  # Evaluate the second-order series
third_approx = polyval(third, X - 6)   # Evaluate the third-order series
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the second-order Taylor series
lines(X, second_approx, col = "blue", lty = 2, lwd = 2)
# Compute the Taylor series expansions
second = taylor(func, 6, 1)  # Second-order Taylor series
third = taylor(func, 6, 3)   # Third-order Taylor series
# Define a range of X values for plotting
X = seq(0, 12, length.out = 500)
# Evaluate the original function and Taylor series
original = func(X)
second_approx = polyval(second, X - 6)  # Evaluate the second-order series
third_approx = polyval(third, X - 6)   # Evaluate the third-order series
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the second-order Taylor series
lines(X, second_approx, col = "blue", lty = 2, lwd = 2)
# Add the second-order Taylor series
lines(X, second_approx + 6, col = "blue", lty = 2, lwd = 2)
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the second-order Taylor series
lines(X, second_approx, col = "blue", lty = 2, lwd = 2)
# Add a legend
legend("topright", legend = c("Original Function", "2nd Order", "3rd Order"),
col = c("black", "blue", "red"), lty = c(1, 2, 3), lwd = 2)
end = 1
# Compute the Taylor series expansions
second = taylor(func, 6, 1)  # Second-order Taylor series
third = taylor(func, 6, 3)   # Third-order Taylor series
# Define a range of X values for plotting
X = seq(0, 12, length.out = 500)
# Evaluate the original function and Taylor series
original = func(X)
second_approx = polyval(second, X)  # Evaluate the second-order series
third_approx = polyval(third, X - 6)   # Evaluate the third-order series
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the second-order Taylor series
lines(X, second_approx, col = "blue", lty = 2, lwd = 2)
third = taylor(func, 6, 2)   # Third-order Taylor series
# Define a range of X values for plotting
X = seq(0, 12, length.out = 500)
third_approx = polyval(third, X)   # Evaluate the third-order series
# Evaluate the original function and Taylor series
original = func(X)
second_approx = polyval(second, X)  # Evaluate the second-order series
third_approx = polyval(third, X)   # Evaluate the third-order series
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the second-order Taylor series
lines(X, second_approx, col = "blue", lty = 2, lwd = 2)
# Add the third-order Taylor series
lines(X, third_approx, col = "red", lty = 3, lwd = 2)
strike_price = 6
time_to_exp = 3
func = function(X) {
(X^2 - strike_price) + time_to_exp
}
# Compute the Taylor series expansions
second = taylor(func, strike_price, 1)  # Second-order Taylor series
third = taylor(func, strike_price, 2)   # Third-order Taylor series
# Define a range of X values for plotting
X = seq(0, 12, length.out = 500)
# Define a range of X values for plotting
X = seq(0, 12, length.out = 50)
# Evaluate the original function and Taylor series
original = func(X)
second_approx = polyval(second, X)  # Evaluate the second-order series
third_approx = polyval(third, X)   # Evaluate the third-order series
# Plot the original function
plot(X, original, type = "l", col = "black", lwd = 2,
ylab = "Value", xlab = "X",
main = "Function and Taylor Series Approximations")
# Add the second-order Taylor series
lines(X, second_approx, col = "blue", lty = 2, lwd = 2)
# Add the third-order Taylor series
lines(X, third_approx, col = "red", lty = 3, lwd = 2)
# Add a legend
legend("topright", legend = c("Original Function", "2nd Order", "3rd Order"),
col = c("black", "blue", "red"), lty = c(1, 2, 3), lwd = 2)
delta = polyder(second)
delta = polyder(second)
gamma = polyder(third)
delta = polyder(second, 0)
delta = polyder(second, strike_price)
delta = polyder(second)
gamma = polyder(third)
poly2str(delta)
poly2str(second)
poly2str(third)
poly2str(second)
poly2str(third)
setwd("C:/Users/alexc/OneDrive/Desktop/ECNS 460/GitHub Materials/460-Term-Project/Data")
data_date = read.csv("Complete_Dataset.csv")
data = read.csv("Complete_Dataset.csv")
library(ggplot2)
SP = ggplot(data_date, aes(x = Date, y = StockChange)) + geom_line() +
labs(title = "Stock Price Change", y = "Price",x = "Date") +
theme_bw()
View(SP)
ggplot(data_date, aes(x = Date, y = StockChange)) + geom_line() +
labs(title = "Stock Price Change", y = "Price",x = "Date") +
theme_bw()
setwd("C:/Users/alexc/OneDrive/Desktop/ECNS 460/GitHub Materials/460-Term-Project/Data")
data_date = read.csv("Complete_Dataset.csv")
data = read.csv("Complete_Dataset.csv")
data <- data[nrow(data):1, ]
data_date = data_date[nrow(data_date):1, ]
data$Date = as.Date(data$Date)
data = data |> select(- X, - Date, - Event) #|> mutate(Date = as.Date(Date))
# Evaluate the model on the test set
test_loss <- model %>% evaluate(X_test, y_test)
# Make predictions on the test set
predictions <- model %>% predict(X_test)
# Denormalize predictions and actual values
predictions_denorm <- predictions * attr(close_scaled, "scaled:scale") + attr(close_scaled, "scaled:center")
actual_values_test <- y_test * attr(close_scaled, "scaled:scale") + attr(close_scaled, "scaled:center")
# Extract the corresponding dates for the test set
test_dates <- data_date$Date[(val_end + window_size + 1):(num_samples + window_size)]
# Combine dates with actual and predicted values
comparison <- data.frame(
Date = test_dates,
Actual = actual_values_test,
Predicted = predictions_denorm
)
comparison$Date = as.Date(comparison$Date)
# Plot actual vs predicted for the test set
main_plot = ggplot(comparison, aes(x = Date)) +
geom_line(aes(y = Actual, color = "Actual"), col = 'black') +
geom_line(aes(y = Predicted, color = "Predicted"), col = 'red') +
labs(title = "Actual vs Predicted Stock Prices (Test Set)", x = "Date", y = "Price") +
theme_bw()
data_date$Date = as.Date(data_date$Date)
ggsave("SP.png", plot = SP, width = 15, height = 5, dpi = 300)
ggplot(data_date, aes(x = Date, y = StockChange)) + geom_line() +
labs(title = "Stock Price Change", y = "Price",x = "Date") +
theme_bw()
SP = ggplot(data_date, aes(x = Date, y = StockChange)) + geom_line() +
labs(title = "Stock Price Change", y = "Price",x = "Date") +
theme_bw()
ggsave("SPC.png", plot = SP, width = 15, height = 5, dpi = 300)
ggplot(data_date, aes(x = Date, y = StockVolume)) + geom_line() +
labs(title = "Stock Price Change", y = "Price",x = "Date") +
theme_bw()
SP = ggplot(data_date, aes(x = Date, y = StockVolume)) + geom_line() +
labs(title = "Stock Volume", y = "Volume",x = "Date") +
theme_bw()
ggsave("SPV.png", plot = SP, width = 15, height = 5, dpi = 300)
