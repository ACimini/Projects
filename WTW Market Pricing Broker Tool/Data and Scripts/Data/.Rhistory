# Plot
plot(gam_curve_test)
# Plot
plot(gam_curve)
gam_curve <- gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, k = c(6,6)), data = model_data, method = "REML")
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(3,3,3)),
data = model_data,
method = "REML"
)
# Plot
plot(gam_curve)
PPM = predict(gam_curve_test, newdata = new_layer)
library(dplyr)
library(stringr)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
)
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
library(dplyr)
library(stringr)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
tower_data = read.csv("C:/Users/alexc/OneDrive/Desktop/Test Tower Data.csv")
clean_dollar <- function(x) {
as.numeric(gsub("[$,]", "", x))
}
clean_percent <- function(x) {
as.numeric(gsub("%", "", x)) / 100
}
tower_data <- tower_data %>%
mutate(
Limit_clean = clean_dollar(Limit),
Base_Premium = clean_dollar(Base.Premium..If.Shown.),
TRIA = clean_dollar(TRIA..If.Shown.),
SLT = clean_dollar(Surplus.Lines.Tax..If.Shown.),
Total_Premium = clean_dollar(Total..Premium..TRIA....SLT.),
Price_Per_Mil = clean_dollar(Price.Per.Mil),
Rate_Relativity = ifelse(Layer.Rate.Relativity %in% c("N/A", ""), NA, clean_percent(Layer.Rate.Relativity))
)
tower_data <- tower_data %>%
mutate(
# Clean up the Layer text
Layer_clean = gsub("[$M ]", "", Layer),
# Extract limit (first number) and attachment (second number)
Limit_numeric = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
Attachment_point = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Special case: "Lead" layers
Attachment_point = ifelse(grepl("Lead", Layer), 0, Attachment_point),
Limit_numeric = ifelse(grepl("Lead", Layer),
as.numeric(str_extract(Layer_clean, "[0-9]+")),
Limit_numeric),
# Calculate exhaust and final variables
Exhaust = Attachment_point + Limit_numeric,
Limit_Mil = Limit_numeric,
Log_Attachment = log(Attachment_point + 1),
Log_Limit = log(Limit_Mil)
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
model_data <- model_data %>%
group_by(Attachment_point) %>%
mutate(Count_Attachment = n()) %>%
ungroup()
library(mgcv)
#gam_curve <- gam(Price_Per_Mil ~ s(Limit_Mil, k = 6) + s(Attachment, k = 6), data = tower_data, method = "REML")
gam_curve <- gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, k = c(6,6)), data = model_data, method = "REML")
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(3,3,3)),
data = model_data,
method = "REML"
)
# Plot
plot(gam_curve)
summary(gam_curve)
PPM = predict(gam_curve_test, newdata = new_layer_test)
library(dplyr)
library(stringr)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
Count_Attachment = num_carriers
)
tower_data = read.csv("C:/Users/alexc/OneDrive/Desktop/Test Tower Data.csv")
clean_dollar <- function(x) {
as.numeric(gsub("[$,]", "", x))
}
clean_percent <- function(x) {
as.numeric(gsub("%", "", x)) / 100
}
tower_data <- tower_data %>%
mutate(
Limit_clean = clean_dollar(Limit),
Base_Premium = clean_dollar(Base.Premium..If.Shown.),
TRIA = clean_dollar(TRIA..If.Shown.),
SLT = clean_dollar(Surplus.Lines.Tax..If.Shown.),
Total_Premium = clean_dollar(Total..Premium..TRIA....SLT.),
Price_Per_Mil = clean_dollar(Price.Per.Mil),
Rate_Relativity = ifelse(Layer.Rate.Relativity %in% c("N/A", ""), NA, clean_percent(Layer.Rate.Relativity))
)
tower_data <- tower_data %>%
mutate(
# Clean up the Layer text
Layer_clean = gsub("[$M ]", "", Layer),
# Extract limit (first number) and attachment (second number)
Limit_numeric = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
Attachment_point = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Special case: "Lead" layers
Attachment_point = ifelse(grepl("Lead", Layer), 0, Attachment_point),
Limit_numeric = ifelse(grepl("Lead", Layer),
as.numeric(str_extract(Layer_clean, "[0-9]+")),
Limit_numeric),
# Calculate exhaust and final variables
Exhaust = Attachment_point + Limit_numeric,
Limit_Mil = Limit_numeric,
Log_Attachment = log(Attachment_point + 1),
Log_Limit = log(Limit_Mil)
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
model_data <- model_data %>%
group_by(Attachment_point) %>%
mutate(Count_Attachment = n()) %>%
ungroup()
library(mgcv)
#gam_curve <- gam(Price_Per_Mil ~ s(Limit_Mil, k = 6) + s(Attachment, k = 6), data = tower_data, method = "REML")
gam_curve <- gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, k = c(6,6)), data = model_data, method = "REML")
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(3,3,3)),
data = model_data,
method = "REML"
)
# Plot
plot(gam_curve)
summary(gam_curve)
PPM = predict(gam_curve_test, newdata = new_layer_test)
output = data.frame(as.numeric(PPM))
write.csv(output, "C:/Temp/temp_output.csv", row.names = FALSE)
input <- read.csv("C:/Temp/temp_input.csv")
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
setwd("C:/Users/alexc/OneDrive/Desktop/Final Files/Data")
setwd("C:/Users/alexc/OneDrive/Desktop/Final Files/Data")
load("TheFinalFinalISTGFinal_data.Rdata")
set.seed(123)  # for reproducibility
library(dplyr)
data_cleaned = data_cleaned  |>
group_by(ClientID)  |>
mutate(UmbrellaPPM = PPM[LayerNumber == 0][1])  |>
ungroup()
# Step 1: Get unique tower IDs
unique_ids = unique(data_cleaned$ClientID)
# Step 2: Randomly sample 80% of them for training
train_ids = sample(unique_ids, size = 0.8 * length(unique_ids))
# Step 3: Create training and test sets based on tower ID
train_data = data_cleaned  |>
filter(ClientID %in% train_ids)
test_data = data_cleaned  |>
filter(!ClientID %in% train_ids)
library(mgcv)
#GAM because of non linear relationship
#Anova tests on whole data
gam_base = gam(Relativity ~ LayerLimit + LayerAttachment, data = train_data)
gam_Base1 = gam(Relativity ~ s(LayerLimit) + s(LayerAttachment), data = train_data)
gam_interaction_base = gam(Relativity ~ te(LayerLimit, LayerAttachment), data = train_data)
anova.gam(gam_base, gam_Base1, gam_interaction_base, test = "F")
gam_inter_UM_PPM = gam(Relativity ~ te(LayerLimit, LayerAttachment) + s(UmbrellaPPM), data = train_data)
anova.gam(gam_inter_UM_PPM)
anova.gam(gam_interaction_base ,gam_inter_UM_PPM, test = "F")
# Predict from the base model
pred_base = predict(gam_interaction_base, newdata = test_data)
# Predict from the enhanced model with UmbrellaPPM
pred_with_UM = predict(gam_inter_UM_PPM, newdata = test_data)
# Compute RMSE for each
rmse_base = sqrt(mean((pred_base - test_data$Relativity)^2, na.rm = TRUE))
rmse_with_UM = sqrt(mean((pred_with_UM - test_data$Relativity)^2, na.rm = TRUE))
# Print results
cat("Base Model RMSE:", rmse_base, "\n")
cat("Model with UmbrellaPPM RMSE:", rmse_with_UM, "\n")
summary(gam_base)
summary(gam_Base1)
summary(gam_interaction_base)
summary(gam_inter_UM_PPM)
anova.gam(gam_base, gam_interaction_base, gam_Base1, gam_inter_UM_PPM, test = "F")
anova.gam(gam_interaction_base, gam_inter_UM_PPM, test = "F")
# Model 1: SIC Division as a random effect
gam_sic_re = gam(
Relativity ~ te(LayerLimit, LayerAttachment) + s(SIC.Division, bs = "re"),
data = train_data
)
# Model 2: SIC Division as a fixed effect
gam_sic_fixed = gam(
Relativity ~ te(LayerLimit, LayerAttachment) + SIC.Division,
data = train_data
)
# Model 3: Separate smooths per SIC Division (interaction smooths)
gam_sic_by = gam(
Relativity ~ te(LayerLimit, LayerAttachment, by = SIC.Division) + SIC.Division,
data = train_data
)
setwd("C:/Users/alexc/OneDrive/Desktop/Final Files/Data")
data = read.csv("Matt_data_with_SIC.csv")
summary(data)
library(dplyr)
# Step 1: Get IDs of towers with all relativities < 1.25 (or NA)
good_ids <- data %>%
group_by(ClientID) %>%
summarise(all_below_1.25 = all(Relativity < 1.25 | is.na(Relativity))) %>%
filter(all_below_1.25) %>%
pull(ClientID)
# Step 2: Filter for those towers AND remove rows with capacity >= 500M
data_cleaned <- data %>%
filter(ClientID %in% good_ids) %>%      # keep only good towers
filter(Capacity < 3.5e8)                  # and capacity under 500 million
ggplot(data_cleaned %>% filter(!is.na(Relativity)),
aes(x = LayerNumber, y = Relativity)) +
geom_point(alpha = 0.1, size = 1, color = "black") +
geom_smooth(method = "loess", se = FALSE, color = "purple", size = 1.2) +
labs(
title = "Rate Relativity by Layer Number",
x = "Layer Number",
y = "Rate Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(Relativity)),
aes(x = Capacity, y = Relativity)) +
geom_point(alpha = 0.1, size = 1, color = "black") +
geom_smooth(method = "loess", se = FALSE, color = "purple", size = 1.2) +
labs(
title = "Rate Relativity by Layer Number",
x = "Layer Number",
y = "Rate Relativity"
) +
theme_minimal()
length(unique(data_cleaned$ClientID))
data_cleaned <- data_cleaned %>%
mutate(SIC.Division = case_when(
SIC.Code >= 100 & SIC.Code <= 999   ~ "Ag, Forestry, Fishing",
SIC.Code >= 1000 & SIC.Code <= 1499 ~ "Mining",
SIC.Code >= 1500 & SIC.Code <= 1799 ~ "Construction",
SIC.Code >= 2000 & SIC.Code <= 3999 ~ "Manufacturing",
SIC.Code >= 4000 & SIC.Code <= 4999 ~ "Transport & Utilities",
SIC.Code >= 5000 & SIC.Code <= 5199 ~ "Wholesale Trade",
SIC.Code >= 5200 & SIC.Code <= 5999 ~ "Retail Trade",
SIC.Code >= 6000 & SIC.Code <= 6799 ~ "Finance, Insurance & RE",
SIC.Code >= 7000 & SIC.Code <= 8999 ~ "Services",
SIC.Code >= 9100 & SIC.Code <= 9729 ~ "Public Administration",
SIC.Code >= 9900 & SIC.Code <= 9999 ~ "Nonclassifiable",
TRUE                                ~ "Other"
))
library(dplyr)
library(forcats)
data_cleaned <- data_cleaned %>%
mutate(SIC.Division = fct_infreq(SIC.Division))  # reorders by descending count
library(ggplot2)
library(ggplot2)
ggplot(data_cleaned %>% filter(!is.na(Relativity), !is.na(SIC.Division)),
aes(x = LayerNumber, y = Relativity)) +
geom_point(alpha = 0.1, size = 0.5, color = "black") +
geom_smooth(method = "loess", se = FALSE, color = "purple", size = 1.5) +
facet_wrap(~ SIC.Division, scales = "free") +
labs(
title = "Rate Relativity vs. Layer Number by SIC Division",
x = "Layer Number",
y = "Rate Relativity"
) +
theme_minimal() +
theme(
strip.text = element_text(size = 9, face = "bold"),
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 8)
)
ggplot(data_cleaned %>% filter(!is.na(Relativity), !is.na(SIC.Division)),
aes(x = Capacity, y = Relativity)) +
geom_point(alpha = 0.2, size = 1, color = "steelblue") +
geom_smooth(method = "loess", se = FALSE, color = "darkorange", size = 1) +
facet_wrap(~ SIC.Division, scales = "free") +
labs(
title = "Rate Relativity vs. Capacity by SIC Division (Most Frequent First)",
x = "Capacity ($)",
y = "Rate Relativity"
) +
scale_x_continuous(labels = scales::label_dollar(scale = 1e-6, suffix = "M")) +
theme_minimal() +
theme(
strip.text = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 8)
)
data_cleaned %>%
group_by(SIC.Division, LayerNumber) %>%
summarise(avg_rel = mean(Relativity, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = LayerNumber, y = fct_rev(SIC.Division), fill = avg_rel)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "plasma") +
labs(
title = "Average Rate Relativity by Layer and SIC Division",
x = "Layer Number",
y = "SIC Division",
fill = "Avg Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(Relativity), !is.na(SIC.Division)),
aes(x = LayerLimit, y = Relativity)) +
geom_point(alpha = 0.2, size = 1, color = "darkgreen") +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +
facet_wrap(~ SIC.Division, scales = "free") +
scale_x_continuous(labels = scales::label_dollar(scale = 1e-6, suffix = "M")) +
labs(
title = "Rate Relativity vs. Layer Limit by SIC Division",
x = "Layer Limit ($M)",
y = "Rate Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(Relativity)),
aes(x = SIC.Division, y = Relativity)) +
geom_violin(fill = "lightblue", alpha = 0.6) +
geom_boxplot(width = 0.1, outlier.shape = NA) +
coord_flip() +
labs(
title = "Distribution of Rate Relativity by SIC Division",
x = "SIC Division",
y = "Rate Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(Relativity)),
aes(x = SIC.Division, y = Relativity)) +
geom_violin(fill = "blue", alpha = 0.6) +
geom_boxplot(width = 0.1, outlier.shape = NA) +
coord_flip() +
labs(
title = "Distribution of Rate Relativity by SIC Division",
x = "SIC Division",
y = "Rate Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(Relativity)),
aes(x = SIC.Division, y = Relativity)) +
geom_violin(fill = "lightblue", alpha = 0.6) +
geom_boxplot(width = 0.1, outlier.shape = NA) +
coord_flip() +
labs(
title = "Distribution of Rate Relativity by SIC Division",
x = "SIC Division",
y = "Rate Relativity"
) +
theme_minimal()
data_cleaned %>%
group_by(SIC.Division, LayerNumber) %>%
summarise(avg_rel = mean(Relativity, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = LayerNumber, y = fct_rev(SIC.Division), fill = avg_rel)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "plasma") +
labs(
title = "Average Rate Relativity by Layer and SIC Division",
x = "Layer Number",
y = "SIC Division",
fill = "Avg Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(Relativity)),
aes(x = SIC.Division, y = Relativity)) +
geom_violin(fill = "lightblue", alpha = 0.6) +
geom_boxplot(width = 0.1, outlier.shape = NA) +
coord_flip() +
labs(
title = "Distribution of Rate Relativity by SIC Division",
x = "SIC Division",
y = "Rate Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(PPM)),
aes(x = LayerNumber, y = PPM)) +
geom_point(alpha = 0.2, color = "darkblue") +
geom_smooth(method = "loess", se = FALSE, color = "firebrick") +
labs(
title = "Price Per Million vs. Layer Number",
x = "Layer Number",
y = "Price Per Million ($)"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(PPM)),
aes(x = LayerNumber, y = PPM)) +
geom_point(alpha = 0.2, color = "grey") +
geom_smooth(method = "loess", se = FALSE, color = "purple") +
labs(
title = "Price Per Million vs. Layer Number",
x = "Layer Number",
y = "Price Per Million ($)"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(PPM)),
aes(x = Capacity, y = PPM)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE, color = "darkgreen") +
scale_x_continuous(labels = scales::label_dollar(scale = 1e-6, suffix = "M")) +
labs(
title = "PPM vs. Layer Capacity",
x = "Capacity ($)",
y = "Price Per Million"
) +
theme_minimal()
data_cleaned %>%
group_by(SIC.Division) %>%
summarise(avg_ppm = mean(PPM, na.rm = TRUE)) %>%
ggplot(aes(x = fct_reorder(SIC.Division, avg_ppm), y = avg_ppm)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Average PPM by SIC Division",
x = "SIC Division",
y = "Avg Price Per Million ($)"
) +
theme_minimal()
data_cleaned %>%
group_by(SIC.Division) %>%
summarise(avg_ppm = mean(PPM, na.rm = TRUE)) %>%
ggplot(aes(x = fct_reorder(SIC.Division, avg_ppm), y = avg_ppm)) +
geom_col(fill = "purple") +
coord_flip() +
labs(
title = "Average PPM by SIC Division",
x = "SIC Division",
y = "Avg Price Per Million ($)"
) +
theme_minimal()
data_cleaned %>%
group_by(ClientID) %>%
mutate(rate_jump = abs(Relativity - lag(Relativity))) %>%
filter(rate_jump > 0.5) %>%
ggplot(aes(x = LayerNumber, y = Relativity, group = ClientID)) +
geom_line(alpha = 0.2) +
geom_point(color = "red") +
labs(
title = "Towers with Sharp Relativity Changes",
x = "Layer Number",
y = "Relativity"
) +
theme_minimal()
ggplot(data_cleaned %>% filter(!is.na(Relativity)),
aes(x = factor(LayerNumber), y = Relativity)) +
geom_boxplot(outlier.alpha = 0.2) +
labs(
title = "Rate Relativity Distribution by Layer Number",
x = "Layer Number",
y = "Relativity"
) +
theme_minimal()
