TRIA = clean_dollar(TRIA..If.Shown.),
SLT = clean_dollar(Surplus.Lines.Tax..If.Shown.),
Total_Premium = clean_dollar(Total..Premium..TRIA....SLT.),
Price_Per_Mil = clean_dollar(Price.Per.Mil),
Rate_Relativity = ifelse(Layer.Rate.Relativity %in% c("N/A", ""), NA, clean_percent(Layer.Rate.Relativity))
)
tower_data <- tower_data %>%
mutate(
# Clean up Layer: remove dollar signs, "M", and spaces
Layer_clean = gsub("[$M ]", "", Layer),
# Extract attachment (before x) and limit (after x)
Limit_numeric = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
Attachment_point = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Special case for "Lead" layer
Limit_numeric = ifelse(grepl("Lead", Layer), Limit_numeric, 0),
Attachment_point = ifelse(grepl("Lead", Layer),
as.numeric(str_extract(Layer_clean, "[0-9]+")), Attachment_point),
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
View(model_data)
tower_data = read.csv("C:/Users/alexc/OneDrive/Desktop/Test Tower Data.csv")
clean_dollar <- function(x) {
as.numeric(gsub("[$,]", "", x))
}
clean_percent <- function(x) {
as.numeric(gsub("%", "", x)) / 100
}
tower_data <- tower_data %>%
mutate(
Limit_clean = clean_dollar(Limit),
Base_Premium = clean_dollar(Base.Premium..If.Shown.),
TRIA = clean_dollar(TRIA..If.Shown.),
SLT = clean_dollar(Surplus.Lines.Tax..If.Shown.),
Total_Premium = clean_dollar(Total..Premium..TRIA....SLT.),
Price_Per_Mil = clean_dollar(Price.Per.Mil),
Rate_Relativity = ifelse(Layer.Rate.Relativity %in% c("N/A", ""), NA, clean_percent(Layer.Rate.Relativity))
)
tower_data <- tower_data %>%
mutate(
# Clean up Layer text
Layer_clean = gsub("[$M ]", "", Layer),
# Extract raw values before any logic
raw1 = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
raw2 = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Handle Lead separately
Attachment_point = ifelse(grepl("Lead", Layer), 0, raw1),
Limit_numeric = ifelse(grepl("Lead", Layer), raw1, raw2)
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
View(model_data)
View(model_data)
tower_data <- tower_data %>%
mutate(
# Clean up the Layer text
Layer_clean = gsub("[$M ]", "", Layer),
# Extract limit (first number) and attachment (second number)
Limit_numeric = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
Attachment_point = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Special case: "Lead" layers
Attachment_point = ifelse(grepl("Lead", Layer), 0, Attachment_point),
Limit_numeric = ifelse(grepl("Lead", Layer),
as.numeric(str_extract(Layer_clean, "[0-9]+")),
Limit_numeric),
# Calculate exhaust and final variables
Exhaust = Attachment_point + Limit_numeric,
Limit_Mil = Limit_numeric,
Log_Attachment = log(Attachment_point + 1),
Log_Limit = log(Limit_Mil)
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
View(model_data)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
library(mgcv)
gam_curve <- gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, k = c(6,6)), data = model_data, method = "REML")
# Plot
plot(gam_curve)
summary(gam_curve)
PPM = predict(gam_curve, newdata = new_layer)
output = data.frame(as.numeric(PPM))
write.csv(output, "C:/Temp/temp_output.csv", row.names = FALSE)
library(dplyr)
library(stringr)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP
)
tower_data = read.csv("C:/Users/alexc/OneDrive/Desktop/Test Tower Data.csv")
clean_dollar <- function(x) {
as.numeric(gsub("[$,]", "", x))
}
clean_percent <- function(x) {
as.numeric(gsub("%", "", x)) / 100
}
tower_data <- tower_data %>%
mutate(
Limit_clean = clean_dollar(Limit),
Base_Premium = clean_dollar(Base.Premium..If.Shown.),
TRIA = clean_dollar(TRIA..If.Shown.),
SLT = clean_dollar(Surplus.Lines.Tax..If.Shown.),
Total_Premium = clean_dollar(Total..Premium..TRIA....SLT.),
Price_Per_Mil = clean_dollar(Price.Per.Mil),
Rate_Relativity = ifelse(Layer.Rate.Relativity %in% c("N/A", ""), NA, clean_percent(Layer.Rate.Relativity))
)
tower_data <- tower_data %>%
mutate(
# Clean up the Layer text
Layer_clean = gsub("[$M ]", "", Layer),
# Extract limit (first number) and attachment (second number)
Limit_numeric = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
Attachment_point = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Special case: "Lead" layers
Attachment_point = ifelse(grepl("Lead", Layer), 0, Attachment_point),
Limit_numeric = ifelse(grepl("Lead", Layer),
as.numeric(str_extract(Layer_clean, "[0-9]+")),
Limit_numeric),
# Calculate exhaust and final variables
Exhaust = Attachment_point + Limit_numeric,
Limit_Mil = Limit_numeric,
Log_Attachment = log(Attachment_point + 1),
Log_Limit = log(Limit_Mil)
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
View(model_data)
model_data_test = model_data |> group_by(Attachment_point)
View(model_data_test)
library(mgcv)
View(model_data_test)
summary(model_data)
model_data <- model_data %>%
group_by(Attachment_point) %>%
mutate(Count_Attachment = n()) %>%
ungroup()
View(model_data_test)
View(model_data)
gam_curve_test = gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, Count_Attachments, k = c(6,6)), data = model_data, method = "REML")
model_data <- model_data %>%
group_by(Attachment_point) %>%
mutate(Count_Attachment = n()) %>%
ungroup()
gam_curve_test = gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, Count_Attachment, k = c(6,6)), data = model_data, method = "REML")
gam_curve_test = gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, Count_Attachment, k = c(6,6,6)), data = model_data, method = "REML")
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(6,6,6)),
data = model_data,
method = "REML"
)
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(4,4,2)),
data = model_data,
method = "REML"
)
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(4,4,3)),
data = model_data,
method = "REML"
)
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(3,3,3)),
data = model_data,
method = "REML"
)
# Plot
plot(gam_curve_test)
# Plot
plot(gam_curve)
gam_curve <- gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, k = c(6,6)), data = model_data, method = "REML")
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(3,3,3)),
data = model_data,
method = "REML"
)
# Plot
plot(gam_curve)
PPM = predict(gam_curve_test, newdata = new_layer)
library(dplyr)
library(stringr)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
)
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
library(dplyr)
library(stringr)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
num_carriers = num_carriers
)
tower_data = read.csv("C:/Users/alexc/OneDrive/Desktop/Test Tower Data.csv")
clean_dollar <- function(x) {
as.numeric(gsub("[$,]", "", x))
}
clean_percent <- function(x) {
as.numeric(gsub("%", "", x)) / 100
}
tower_data <- tower_data %>%
mutate(
Limit_clean = clean_dollar(Limit),
Base_Premium = clean_dollar(Base.Premium..If.Shown.),
TRIA = clean_dollar(TRIA..If.Shown.),
SLT = clean_dollar(Surplus.Lines.Tax..If.Shown.),
Total_Premium = clean_dollar(Total..Premium..TRIA....SLT.),
Price_Per_Mil = clean_dollar(Price.Per.Mil),
Rate_Relativity = ifelse(Layer.Rate.Relativity %in% c("N/A", ""), NA, clean_percent(Layer.Rate.Relativity))
)
tower_data <- tower_data %>%
mutate(
# Clean up the Layer text
Layer_clean = gsub("[$M ]", "", Layer),
# Extract limit (first number) and attachment (second number)
Limit_numeric = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
Attachment_point = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Special case: "Lead" layers
Attachment_point = ifelse(grepl("Lead", Layer), 0, Attachment_point),
Limit_numeric = ifelse(grepl("Lead", Layer),
as.numeric(str_extract(Layer_clean, "[0-9]+")),
Limit_numeric),
# Calculate exhaust and final variables
Exhaust = Attachment_point + Limit_numeric,
Limit_Mil = Limit_numeric,
Log_Attachment = log(Attachment_point + 1),
Log_Limit = log(Limit_Mil)
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
model_data <- model_data %>%
group_by(Attachment_point) %>%
mutate(Count_Attachment = n()) %>%
ungroup()
library(mgcv)
#gam_curve <- gam(Price_Per_Mil ~ s(Limit_Mil, k = 6) + s(Attachment, k = 6), data = tower_data, method = "REML")
gam_curve <- gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, k = c(6,6)), data = model_data, method = "REML")
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(3,3,3)),
data = model_data,
method = "REML"
)
# Plot
plot(gam_curve)
summary(gam_curve)
PPM = predict(gam_curve_test, newdata = new_layer_test)
library(dplyr)
library(stringr)
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
new_layer <- data.frame(
Limit_numeric = limit,
Attachment_point = AP
)
new_layer_test <- data.frame(
Limit_numeric = limit,
Attachment_point = AP,
Count_Attachment = num_carriers
)
tower_data = read.csv("C:/Users/alexc/OneDrive/Desktop/Test Tower Data.csv")
clean_dollar <- function(x) {
as.numeric(gsub("[$,]", "", x))
}
clean_percent <- function(x) {
as.numeric(gsub("%", "", x)) / 100
}
tower_data <- tower_data %>%
mutate(
Limit_clean = clean_dollar(Limit),
Base_Premium = clean_dollar(Base.Premium..If.Shown.),
TRIA = clean_dollar(TRIA..If.Shown.),
SLT = clean_dollar(Surplus.Lines.Tax..If.Shown.),
Total_Premium = clean_dollar(Total..Premium..TRIA....SLT.),
Price_Per_Mil = clean_dollar(Price.Per.Mil),
Rate_Relativity = ifelse(Layer.Rate.Relativity %in% c("N/A", ""), NA, clean_percent(Layer.Rate.Relativity))
)
tower_data <- tower_data %>%
mutate(
# Clean up the Layer text
Layer_clean = gsub("[$M ]", "", Layer),
# Extract limit (first number) and attachment (second number)
Limit_numeric = as.numeric(str_extract(Layer_clean, "^[0-9]+")),
Attachment_point = as.numeric(str_extract(Layer_clean, "(?<=x)[0-9]+")),
# Special case: "Lead" layers
Attachment_point = ifelse(grepl("Lead", Layer), 0, Attachment_point),
Limit_numeric = ifelse(grepl("Lead", Layer),
as.numeric(str_extract(Layer_clean, "[0-9]+")),
Limit_numeric),
# Calculate exhaust and final variables
Exhaust = Attachment_point + Limit_numeric,
Limit_Mil = Limit_numeric,
Log_Attachment = log(Attachment_point + 1),
Log_Limit = log(Limit_Mil)
)
model_data = tower_data |> select(Price_Per_Mil,Limit_numeric,Attachment_point)
model_data <- model_data %>%
group_by(Attachment_point) %>%
mutate(Count_Attachment = n()) %>%
ungroup()
library(mgcv)
#gam_curve <- gam(Price_Per_Mil ~ s(Limit_Mil, k = 6) + s(Attachment, k = 6), data = tower_data, method = "REML")
gam_curve <- gam(Price_Per_Mil ~ te(Limit_numeric,Attachment_point, k = c(6,6)), data = model_data, method = "REML")
gam_curve_test <- gam(
Price_Per_Mil ~ te(Limit_numeric, Attachment_point, Count_Attachment, k = c(3,3,3)),
data = model_data,
method = "REML"
)
# Plot
plot(gam_curve)
summary(gam_curve)
PPM = predict(gam_curve_test, newdata = new_layer_test)
output = data.frame(as.numeric(PPM))
write.csv(output, "C:/Temp/temp_output.csv", row.names = FALSE)
input <- read.csv("C:/Temp/temp_input.csv")
input <- read.csv("C:/Temp/temp_input.csv")
industry = input[1,]
limit = as.numeric(input[2,])
AP = as.numeric(input[3,])
Total_limit = as.numeric(input[4,])
num_carriers = as.numeric(input[5,])
library(mgcv)
library(quantreg)
#Sets the Working Directory to the folder the R file is in
# Set working directory to script location — works in Rscript and RStudio
get_script_path <- function() {
args <- commandArgs(trailingOnly = FALSE)
path <- sub("--file=", "", args[grep("--file=", args)])
if (length(path) == 0) {
# Fallback if running interactively
path <- rstudioapi::getSourceEditorContext()$path
}
return(normalizePath(path))
}
get_script_folder <- function() {
args <- commandArgs(trailingOnly = FALSE)
path <- sub("--file=", "", args[grep("--file=", args)])
if (length(path) == 0) {
# Fallback for RStudio
path <- rstudioapi::getSourceEditorContext()$path
}
return(dirname(normalizePath(path)))
}
script_folder <- get_script_folder()
script_path = get_script_path()
setwd(dirname(script_path))
#Reads in the input file with the needed information
input = read.csv("temp_input.csv")
input_attachment = as.numeric(input[1,])
input_limit = as.numeric(input[2,])
input_UM_PPM = as.numeric(input[3,])
layer_1_attachment = as.numeric(input[4,])
layer_1_limit = as.numeric(input[5,])
layer_1_prem = as.numeric(input[6,])
um_attachment = as.numeric(input[7,])
um_limit = as.numeric(input[8,])
um_prem = as.numeric(input[9,])
quinn_model_predict = function(input_limit, input_attachment, lower_layers) {
if (nrow(lower_layers) < 2) {
warning("Need at least 2 layers to predict upper layer")
return(NA)
}
if (!exists("collapsed_data_all")) {
collapsed_data_all <<- read.csv("collapsed.csv")
}
if (!exists("qmodel") || !exists("lmodel") || !exists("KNOWN_LAYER_COUNT") || KNOWN_LAYER_COUNT != nrow(lower_layers)) {
KNOWN_LAYER_COUNT <<- nrow(lower_layers)
collapsed_data = collapsed_data_all[collapsed_data_all$layers_in_tower > KNOWN_LAYER_COUNT, ]
collapsed_data$midpoint = collapsed_data$attachment + collapsed_data$limit / 2
qx = collapsed_data$midpoint / 1e6
qy = collapsed_data$lead_ratio
qmodel <<- nlrq(qy ~ a / (qx + exp(b)), start = list(a = 1, b = 0.05), tau = 0.5)
qcoef = coef(qmodel)
qmodel_lo_50 <<- nlrq(qy ~ a / (qx + exp(b)), start = as.list(qcoef), tau = 0.5-0.5/2)
qmodel_hi_50 <<- nlrq(qy ~ a / (qx + exp(b)), start = as.list(qcoef), tau = 0.5+0.5/2)
qmodel_lo_90 <<- nlrq(qy ~ a / (qx + exp(b)), start = as.list(qcoef), tau = 0.5-0.9/2)
qmodel_hi_90 <<- nlrq(qy ~ a / (qx + exp(b)), start = as.list(qcoef), tau = 0.5+0.9/2)
qmodel_lo_95 <<- nlrq(qy ~ a / (qx + exp(b)), start = as.list(qcoef), tau = 0.5-0.95/2)
qmodel_hi_95 <<- nlrq(qy ~ a / (qx + exp(b)), start = as.list(qcoef), tau = 0.5+0.95/2)
collapsed_data$pred_lead_ratio = predict(qmodel, newdata = data.frame(qx = collapsed_data$midpoint/1e6))
collapsed_data$ratio_scalar = collapsed_data$pred_lead_ratio / collapsed_data$lead_ratio
lxr = rep(
collapsed_data[collapsed_data$layer_number==KNOWN_LAYER_COUNT-1, ]$ratio_scalar,
times=collapsed_data[collapsed_data$layer_number==KNOWN_LAYER_COUNT-1, ]$layers_in_tower - KNOWN_LAYER_COUNT
)
lyr = collapsed_data[collapsed_data$layer_number>=KNOWN_LAYER_COUNT, ]$ratio_scalar
lmodel <<- lm(log(lyr) ~ log(lxr))
}
# Find the lead and top known layer
lead_layer = lower_layers[1, ]
top_known_layer = lower_layers[KNOWN_LAYER_COUNT, ]
# Calculate the lead ratio of the top layer
lead_per_mil = lead_layer$premium / (lead_layer$limit / 1e6)
top_per_mil = top_known_layer$premium / (top_known_layer$limit / 1e6)
top_lead_ratio = top_per_mil / lead_per_mil
# Predict the top lead ratio
pred_top_lead_ratio = predict(
qmodel,
newdata = data.frame(qx = (top_known_layer$attachment + top_known_layer$limit / 2) / 1e6)
)
newdata = data.frame(qx = (input_attachment + input_limit / 2) / 1e6)
query_lead_ratios = predict(qmodel, newdata = newdata)
query_lead_ratios_lo_50 = predict(qmodel_lo_50, newdata = newdata)
query_lead_ratios_hi_50 = predict(qmodel_hi_50, newdata = newdata)
query_lead_ratios_lo_90 = predict(qmodel_lo_90, newdata = newdata)
query_lead_ratios_hi_90 = predict(qmodel_hi_90, newdata = newdata)
query_lead_ratios_lo_95 = predict(qmodel_lo_95, newdata = newdata)
query_lead_ratios_hi_95 = predict(qmodel_hi_95, newdata = newdata)
top_ratio_scalar = pred_top_lead_ratio / top_lead_ratio
# Calculate epsilon
epsilon = exp(predict(
lmodel,
newdata = data.frame(lxr=top_ratio_scalar)
))
query_scaled_lead_ratios <<- query_lead_ratios / epsilon
# Calculate rate relativities
rr = c(query_scaled_lead_ratios, NA) / c(top_lead_ratio, query_scaled_lead_ratios)
rr = rr[-length(rr)]
premiums = query_scaled_lead_ratios * lead_per_mil * input_limit / 1e6
return(data.frame(
rate_rels = rr,
attachment = input_attachment,
limit = input_limit,
ppm = premiums / (input_limit / 1e6),
premium = premiums,
ci_50_lo = (query_scaled_lead_ratios * query_lead_ratios_lo_50 / query_lead_ratios) * lead_per_mil * input_limit / 1e6,
ci_50_hi = (query_scaled_lead_ratios * query_lead_ratios_hi_50 / query_lead_ratios) * lead_per_mil * input_limit / 1e6,
ci_90_lo = (query_scaled_lead_ratios * query_lead_ratios_lo_90 / query_lead_ratios) * lead_per_mil * input_limit / 1e6,
ci_90_hi = (query_scaled_lead_ratios * query_lead_ratios_hi_90 / query_lead_ratios) * lead_per_mil * input_limit / 1e6,
ci_95_lo = (query_scaled_lead_ratios * query_lead_ratios_lo_95 / query_lead_ratios) * lead_per_mil * input_limit / 1e6,
ci_95_hi = (query_scaled_lead_ratios * query_lead_ratios_hi_95 / query_lead_ratios) * lead_per_mil * input_limit / 1e6
))
}
QR_df = data.frame(
attachment = c(um_attachment, layer_1_attachment),
limit = c(um_limit, layer_1_limit),
premium = c(um_prem, layer_1_prem)
)
qr_pred = quinn_model_predict(input_limit,input_attachment,
QR_df)
new_layer = data.frame(
LayerLimit = input_limit,
LayerAttachment = input_attachment,
UmbrellaPPM = input_UM_PPM
)
#Loads in the model data
data = read.csv("Final_Data.csv")
#Computes the actual GAM
gam_test = gam(Relativity ~ te(LayerAttachment, LayerLimit) + s(UmbrellaPPM), data = data)
#predicts the RR from the GAM
Prediction = predict(gam_test, newdata = new_layer, se.fit = TRUE)
predRR = Prediction$fit
SE = Prediction$se.fit
# Calculate 95% confidence interval bounds
upper = predRR + 1.96 * SE
lower = predRR - 1.96 * SE
#gets the output
output = data.frame(as.numeric(predRR),upper,lower, qr_pred[,5],qr_pred[,10], qr_pred[,11])
#Writes to the CSV
write.csv(output, "temp_output.csv", row.names = FALSE)
summary(gam_test)
